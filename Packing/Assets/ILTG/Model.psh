#ifdef HLSL


#endif
#ifdef GLSL
#define MODEL
// this code was generated, the code that the developer codes is much cleaner than what you're seeing here

// <Sampler Name='u_samplerState' Texture='u_texture' />

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#endif

uniform sampler2D u_texture;
#ifdef ALPHATESTED
uniform float u_alphaThreshold;
#endif
uniform vec3 u_fogColor;

varying vec4 v_color;
varying vec2 v_texcoord;
varying float v_fog;



uniform float u_fogYMultiplier;
uniform float u_time;

float CalculateLightIntensity(float timeOfDay)
		{
			if (timeOfDay <= 0.2 || timeOfDay > 0.8)
			{
				return 0.0;
			}
			if (timeOfDay > 0.2 && timeOfDay <= 0.3)
			{
				return (timeOfDay - 0.2) / 0.100000009;
			}
			if (timeOfDay > 0.3 && timeOfDay <= 0.7)
			{
				return 1.0;
			}
			return 1.0 - (timeOfDay - 0.7) / 0.100000024;
}
#define PI 3.1415926538
#define FOG
vec3 get_sun_direction(float time) {
float angle = 2.0 * time * PI;
return vec3(sin(angle), cos(angle), 0.0);

}
vec3 TorchColor = vec3(1.3,0.65,0.0)*2.0; //vec3(2.005, 2.0005, 1.0); 
vec3 RainColor = vec3(0.4,0.6,1.25);
vec3 DuskColor = vec3(0.7,0.5,0.1)*2.0;

uniform vec3 u_viewPosition;

uniform lowp vec3 u_ambientLightColor;

void main()
{
    
    
	// Color
	float angle = ((2.0 * u_time) * 3.14159274) + 3.14159274;
    vec3 LightPos = vec3(-sin(angle), -cos(angle), 0.0);
    
    
    vec4 result = texture2D(u_texture, v_texcoord);
   float LightAmount = max(u_ambientLightColor.x, max(u_ambientLightColor.y, u_ambientLightColor.z));
	bool NotMultiplied = true;
	
	result *= v_color;
	
	
	float SkyLight = CalculateLightIntensity(u_time);
	
	if (LightAmount > SkyLight &&  LightAmount - SkyLight > 0.235) { 
            if (NotMultiplied && (!(u_fogYMultiplier > 0.5))) {
                    result.rgb *= 1.8;
    
            }
            
            
	        result.rgb *= TorchColor;
    } else { 
	        if (u_fogYMultiplier > 0.5) {
	                
	                result = mix(result, mix(result, vec4(u_fogColor, 1), 0.15), u_fogYMultiplier);
	        }
	}
    
	
    
	// Alpha threshold
    
#ifdef ALPHATESTED
	if (result.a <= u_alphaThreshold)
		discard;
#endif
   
   
   
   
	// Fog
	vec4 premultipliedFogColor = vec4(u_fogColor * result.a, result.a);
	result = mix(result, premultipliedFogColor, v_fog);
	
	// On some devices using gl_FragColor in calculations causes a compile fail (Kindle Fire 1)
	
	
	gl_FragColor = result;
}

#endif
