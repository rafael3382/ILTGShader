#ifdef GLSL

// <Sampler Name='u_samplerState' Texture='u_texture' />

#ifdef GL_ES
precision mediump float;
#endif

#ifdef USE_TEXTURE
uniform sampler2D u_texture;
#endif
#ifdef USE_ALPHATHRESHOLD
uniform float u_alphaThreshold;
#endif

#ifdef USE_TEXTURE
varying vec2 v_texcoord;
#endif
varying vec4 v_color;


uniform float u_time;
uniform float u_fogYMultiplier;

float CalculateLightIntensity(float timeOfDay)
		{
			if (timeOfDay <= 0.2 || timeOfDay > 0.8)
			{
				return 0.0;
			}
			if (timeOfDay > 0.2 && timeOfDay <= 0.3)
			{
				return (timeOfDay - 0.2) / 0.100000009;
			}
			if (timeOfDay > 0.3 && timeOfDay <= 0.7)
			{
				return 1.0;
			}
			return 1.0 - (timeOfDay - 0.7) / 0.100000024;
}

#define TorchColor vec3(1.3,0.65,0.0)*2.0
#define RainColor vec3(0.4,0.6,1.25)
#define DuskColor vec3(0.7,0.5,0.1)*2.0
#define DawnColor vec3(0.9, 0.85, 0.8)

#define IS_DAWN u_time >= 0.25 && u_time < 0.3
#define IS_DUSK u_time >= 0.75 && u_time < 0.8

void main()
{
	// Color
	vec4 result = v_color;
   
   float LightAmount = max(v_color.x, max(v_color.y, v_color.z));
    float SkyLight = CalculateLightIntensity(u_time);
   
	// Texture
#ifdef USE_TEXTURE
	result *= texture2D(u_texture, v_texcoord);
#endif

	// Alpha threshold
#ifdef USE_ALPHATHRESHOLD
	if (result.a <= u_alphaThreshold)
		discard;
#endif
    bool NotMultiplied = true;
   if (u_time < 0.5) {
	
	result.rgb /= 1.5;
	
	}
	else {
	NotMultiplied = false;
	result *= 1.5456788;
	}
	// torchlight
    
	if (LightAmount > SkyLight && LightAmount - SkyLight > 0.235) { 
	
            if (NotMultiplied) {
                    result *= 1.8;
    
            }
            
            
            
            
            
	        result.xyz *= TorchColor;
	       
	       
	} else {
	       if (u_fogYMultiplier > 0.5) {
	                result.rgb *= RainColor;
	                
	        }
    }
	if (IS_DUSK) {
	vec3 duskcolor = mix(v_color.rgb, DuskColor*2.0, (u_time-0.75)*84.0);
	result.xyz *= duskcolor/4.0;
	}
	// Dawn Orange Color
    if (IS_DAWN) { // Dawn
	
	result.xyz *= DawnColor;
	result.rgb *= 2.0;
	}
	if (u_time >= 0.3 && u_time < 0.4) { 
	result *= 2.0;
	}

	// On some devices using gl_FragColor in calculations causes a compile fail (Kindle Fire 1)
	gl_FragColor = result;
}

#endif
