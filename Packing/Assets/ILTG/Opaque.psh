#extension GL_OES_standard_derivatives : enable

// ILTG Shader
// Made by NomeCriativoRFM
// Reviewed in 2022 for more quality

#define OPAQUE

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#define highp mediump
#endif
precision lowp int;
#endif

const float opst = 1.0/16.0;

// FEATURES
#define LIGHT_DETECT
#define VERTICAL_SHADOW
#define POM

uniform mat4 u_shadowMatrix;

uniform sampler2D u_texture;
uniform sampler2D u_worldTopMap;
#ifdef POM

#endif
uniform sampler2D u_depthMap;
uniform sampler2D u_normalMap;
uniform lowp vec2 u_screenSize;
uniform lowp vec3 u_fogColor;
uniform highp float u_time;
uniform lowp float u_waterDepth;
uniform lowp float u_lightningStrikeBrightness;
uniform highp vec3 u_viewPosition;
uniform lowp float u_fogYMultiplier;

varying lowp vec4 v_color;
varying mediump vec2 v_texcoord;
varying lowp float v_fog;
varying highp vec3 v_pos;
varying highp vec3 v_screenpos;

lowp float CalculateLightIntensity(float timeOfDay)
{
	if (timeOfDay <= 0.2 || timeOfDay > 0.8)
	{
		return 0.1;
	}
	if (timeOfDay > 0.2 && timeOfDay <= 0.3)
	{
		return (timeOfDay - 0.2) / 0.100000009;
	}
	if (timeOfDay > 0.3 && timeOfDay <= 0.7)
	{
		return 1.0;
	}
	return 1.0 - (timeOfDay - 0.7) / 0.100000024;
}

mediump vec2 GetCoord(int x, int y) {
   float base = 16.0;
   float b = 1.0/base;
   float rx = float(x)-1.0;
   float ry = float(y)-1.0;
   
   return vec2(rx*b, (ry*b));
}

#define TorchColor vec3(1.3, 0.65, 0.0) * 1.5
#define RainColor vec3(0.4, 0.6, 1.25)
#define DuskColor vec3(0.7, 0.5, 0.1) * 2.0
#define DawnColor vec3(1.0, 0.7, 0.4) * 2.0

#define IS_DAWN u_time >= 0.25 && u_time < 0.3
#define IS_DUSK u_time >= 0.75 && u_time < 0.8

bool great_than(vec2 a, vec2 b) {
    return a.x >= b.x && a.y >= b.y;
}
bool less_than(vec2 a, vec2 b) {
    return a.x <= b.x && a.y <= b.y;
}

vec2 invert_y(vec2 b, float base) {
	vec2 o = b;
	o.y = base - o.y;
	return o;
}
vec2 repeat(vec2 uv, float chunk) {
	return uv - (floor(uv / chunk) * chunk);
}

lowp int get_block(vec2 block_uv) {
    vec2 texcoord =  floor(block_uv / opst);
    return int(texcoord.x + (texcoord.y*16.0));
}

#define CUBE_RIGHT 0
#define CUBE_LEFT 1
#define CUBE_DOWN 2
#define CUBE_UP 3
#define CUBE_FRONT 4
#define CUBE_BACK 5
#define INVALID_CUBE -1

int get_cube_face_by_texture(vec2 uv) {
	int block_uv = get_block(uv);
	if (block_uv  == 0) return CUBE_UP;
    return INVALID_CUBE;
}

int get_cube_face(vec3 normal)
{
  if (dot(normal, vec3(0.0, 1.0, 0.0)) < 0.0)  return CUBE_DOWN;
  if (dot(normal, vec3(0.0, -1.0, 0.0)) < 0.0) return CUBE_UP;
  if (dot(normal, vec3(1.0, 0.0, 0.0)) < 0.0) return CUBE_LEFT;
  if (dot(normal, vec3(-1.0, 0.0, 0.0)) < 0.0) return CUBE_RIGHT;
  if (dot(normal, vec3(0.0, 0.0, -1.0)) < 0.0) return CUBE_FRONT;
  if (dot(normal, vec3(0.0, -1.0, 1.0)) < 0.0) return CUBE_BACK;
  
  return INVALID_CUBE;
}

#define CUBE_NORMAL_RIGHT vec3(1.0, 0.0, 0.0)
#define CUBE_NORMAL_LEFT vec3(-1.0, 0.0, 0.0)
#define CUBE_NORMAL_DOWN vec3(0.0, 1.0, 0.0)
#define CUBE_NORMAL_UP vec3(0.0, -1.0, 0.0)
#define CUBE_NORMAL_FRONT vec3(0.0, 0.0, 1.0)
#define CUBE_NORMAL_BACK vec3(0.0, 0.0, -1.0)
#define INVALID_CUBE_NORMAL vec3(1.0, 0.2, 0.1)

/* This isn't very stable and might fail
in block borders, it is used because 
it's more stable in some GPUs
*/
lowp vec3 Oldget_cube_normal_face() {
	
  int facebytexture = get_cube_face_by_texture(v_texcoord);
  if (facebytexture != INVALID_CUBE) {
  	if (facebytexture == CUBE_UP) return CUBE_NORMAL_UP;
  }
  vec3 result_normal = vec3(0.0);
  float normalcount = 0.;
  
  vec3 fract_pos = fract(v_pos);
  
  if (fract_pos.z == 0.0 && u_viewPosition.z - v_pos.z > 0.0) { // Back
    result_normal += CUBE_NORMAL_BACK;normalcount += 1.0;
  }
  if (fract_pos.x == 0.0 && u_viewPosition.x - v_pos.x < 0.0) { // Right
    result_normal += CUBE_NORMAL_RIGHT;normalcount += 1.0;
  }
  if (fract_pos.x == 0.0 && u_viewPosition.x - v_pos.x > 0.0) { // Left
    result_normal += CUBE_NORMAL_LEFT;normalcount += 1.0;
  }
  if (fract_pos.y == 0.0 && u_viewPosition.y - v_pos.y < 0.0) { // Down
    result_normal += CUBE_NORMAL_DOWN;normalcount += 1.0;
  }
  if (fract_pos.y == 0.0 && u_viewPosition.y - v_pos.y > 0.0) { // Up
    result_normal += CUBE_NORMAL_UP;normalcount += 1.0;
  }
  if (fract_pos.z == 0.0 && u_viewPosition.z - v_pos.z < 0.0) { // Front
    result_normal += CUBE_NORMAL_FRONT;normalcount += 1.0;
  }
  if (result_normal != vec3(0.0)) return result_normal / normalcount;
  
  return INVALID_CUBE_NORMAL;
}

lowp vec3 get_cube_normal_face()
{
    vec2 texcoord = repeat(v_texcoord, opst);
  
    if (texcoord.x != 0.0 && texcoord.x != 1.0 && texcoord.y != 0.0 && texcoord.y != 1.0)
    { 
         vec3 normal = Oldget_cube_normal_face();
         if (normal != INVALID_CUBE_NORMAL) { return normal;}
   }   
   return normalize(cross(dFdx(v_pos),dFdy(v_pos)));
}

float remainder(float x, float a) {
	if (a == 0.0) {return 0.0;}
	return (x - (floor(x/a)*a));
}

vec2 remainder(vec2 x, float a) {
	if (a == 0.0) {return vec2(0.0);}
	return (x - (floor(x/a)*a));
}

mediump vec2 EGetCoord(int x, int y) {
  float base = 16.0;
  float b = 1.0 / base;
  float rx = float(x);
  float ry = float(y);

  return vec2(rx * b, (ry * b));
}

highp float rand(highp vec2 X){ 
	return fract(cos(X.x + X.y *252.0) * 75.0);}

#ifdef VERTICAL_SHADOW
lowp vec3 GetBlock(float x, float z)
{
    
    return texture2D(u_worldTopMap, vec2(
        ( remainder(floor(x), 16.0))/16.0,
        (remainder(floor(z), 16.0))/16.0
    )).rgb * 255.0;
}

lowp float noise(highp vec2 X){ 
   highp vec2 A = floor(X);
   highp vec2 B = fract(X);
   highp vec2 C = smoothstep(vec2(0.0),vec2(1.0),B);
   highp float D = rand(A+vec2(0.0,0.0));
   highp float E = rand(A+vec2(1.0,0.0));
   highp float F = rand(A+vec2(0.0,1.0));
   highp float G = rand(A+vec2(1.0,1.0));
   lowp float X1 = mix( mix(D, E, C.x),mix(F, G, C.x),C.y);
	return X1;}

lowp float WH(highp vec2 PS)
{
    highp float TIME =u_time*800.0;
    PS*=0.6;
    highp vec2 Wp = vec2(PS.x*2.0+PS.y,PS.y*2.0+PS.x)*0.5;
    lowp float OP1=noise(Wp*0.7-vec2(TIME*1.2))*1.5;
    OP1=1.0-abs(OP1-0.7)*2.0;
    lowp float OP2=noise(Wp*1.2+vec2(TIME));
    OP2=1.0-abs(OP2-0.7)*2.0;
    lowp float OP =(OP1+OP2)*0.015;
    return OP;
}

// Lightweight Noise
lowp float lnoise(highp vec2 X){ 
   mediump vec2 A = floor(X);
   mediump vec2 B = fract(X);
   mediump vec2 C = smoothstep(vec2(0.0),vec2(1.0),B);
   mediump float D = rand(A+vec2(0.0,0.0));
   mediump float E = rand(A+vec2(1.0,0.0));
   mediump float F = rand(A+vec2(0.0,1.0));
   mediump float G = rand(A+vec2(1.0,1.0));
   lowp float X1 = mix( mix(D, E, C.x),mix(F, G, C.x),C.y);
	return X1;}

// Super-Lightweight Noise
lowp float slnoise(highp vec2 X){ 
   mediump vec2 A = floor(X);
   mediump vec2 B = fract(X);
   highp vec2 C = smoothstep(vec2(0.0),vec2(1.0),B);
   lowp float D = rand(A+vec2(0.0,0.0));
   lowp float E = rand(A+vec2(1.0,0.0));
   lowp float F = rand(A+vec2(0.0,1.0));
   lowp float G = rand(A+vec2(1.0,1.0));
   lowp float X1 = mix( mix(D, E, C.x),mix(F, G, C.x),C.y);
	return X1;
}

// Lightweight WH
lowp float lWH(highp vec2 PS)
{
    highp float TIME =u_time*800.0;
    PS*=0.6;
    mediump vec2 Wp = vec2(PS.x*2.0+PS.y,PS.y*2.0+PS.x)*0.5;
    
    lowp float OP1=lnoise(Wp*0.7-vec2(TIME*1.2))*1.5;
    OP1=1.0-abs(OP1-0.7)*2.0;
    lowp float OP2=slnoise(Wp*1.2+vec2(TIME));
    OP2=1.0-abs(OP2-0.7)*2.0;
    lowp float OP =(OP1 + OP2)*0.015;
    return OP;
}
#endif

lowp vec3 aces(vec3 x)
{
    float a = 2.51;
    float b = 0.03;
    float c = 2.43;
    float d = 0.59;
    float e = 0.14;
    return clamp((x*(a*x+b))/(x*(c*x+d)+e), 0.0, 1.0);
}
mat3 transpose(mat3 m) {
  return mat3(m[0][0], m[1][0], m[2][0],
              m[0][1], m[1][1], m[2][1],
              m[0][2], m[1][2], m[2][2]);
}
#define DAWN vec2(0.25, 0.3)
#define NOON vec2(0.3, 0.75)
#define DUSK vec2(0.75, 0.8)
#define NIGHT vec2(0.8, 0.25)

/*
float TimeCondition(vec2 TimeRange)
{
    if (u_time > TimeRange.x && u_time < TimeRange.y)
    {
        return (u_time - TimeRange.x)/(TimeRange.y - TimeRange.x);
    }
    return 0.0;
}
*/

uniform  mat4 u_viewProjectionMatrix;

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

#ifdef POM
vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
{ 
    const float numLayers = 32.0;
    float layerDepth = 1.0 / numLayers;
    float currentLayerDepth = 0.0;
    vec2 P = viewDir.xy / viewDir.z * 0.4;
    vec2 deltaTexCoords = P / numLayers;
     
    vec2  currentTexCoords = texCoords;
    vec2 realTexcoord = floor(v_texcoord/opst)*opst+currentTexCoords*opst;
    float currentDepthMapValue = texture2D(u_depthMap, realTexcoord).r;
      
    while(currentLayerDepth < currentDepthMapValue)
    {
        currentTexCoords -= deltaTexCoords;
        realTexcoord = (floor(v_texcoord/opst)*opst)+currentTexCoords*opst;
        currentDepthMapValue = texture2D(u_depthMap, realTexcoord).r;
        currentLayerDepth += layerDepth;
        if (clamp(currentTexCoords, 0.0, 1.0) != currentTexCoords) break;
    }
    return currentTexCoords; 
}
#endif
// PBR END

mat3 tbn(vec3 N, vec3 p, vec2 uv)
{
    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx(p);
    vec3 dp2 = dFdy(p);
    vec2 duv1 = dFdx(uv);
    vec2 duv2 = dFdy(uv);

    // solve the linear system
    vec3 dp2perp = cross(dp2, N);
    vec3 dp1perp = cross(N, dp1);
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;

    // construct a scale-invariant frame 
    float invmax = inversesqrt(max(dot(T,T), dot(B,B)));
    return mat3(T * invmax, B * invmax, N);
}

/*
lowp vec3 ledcolor = vec3(1,1,1);
if (TopmostLed.z == 2.0) ledcolor = vec3(0,1,1);
else if (TopmostLed.z == 3.0) ledcolor = vec3(1,0,0);
 else if (TopmostLed.z == 4.0) ledcolor = vec3(0,0,1);
 else if (TopmostLed.z == 5.0) ledcolor = vec3(1.0, 0.9, 0.0);
 else if (TopmostLed.z == 6.0) ledcolor = vec3(0,1,0);
 else if (TopmostLed.z == 7.0) ledcolor = vec3(1.0, 0.4901, 0.0);
 else if (TopmostLed.z == 8.0) ledcolor = vec3(1,0,1);*/


void main()
{
    lowp float playerDistance = distance(v_pos, u_viewPosition);
    // Normal
    lowp vec3 normal = get_cube_normal_face();
    mat3 TBN = tbn(normal, v_pos, v_texcoord.xy);
    normal = -normal;
    lowp int cubeface = get_cube_face(normal);
    lowp int block_texcoord = get_block(v_texcoord);
    
    // Calculate Sun Position
    lowp float angle = (2.0 * u_time * 3.1415)+3.1415;
	lowp vec3 RealLightPos = vec3(sin(angle), cos(angle), 0.0);
	angle -= (v_pos.y/255.0) * 3.1415;
    lowp vec3 LightPos = vec3(sin(angle), cos(angle), 0.0);
    vec3 sunposition = LightPos;
    
#ifdef POM
    vec4 texColor;
    vec3 texNormal;
    if (playerDistance < 8.0)
    {
        vec3 viewDir = normalize(u_viewPosition - v_pos) * TBN;
        
        vec2 uv0 = repeat(v_texcoord, opst)/opst;
        vec2 uv1 = v_texcoord - (uv0*opst);
        
        
        // Map parallax texture offsets
        vec2 parallaxCoord = clamp(ParallaxMapping(uv0, viewDir), 0.0, 0.99);
        
        texColor = texture2D(u_texture, parallaxCoord*opst+uv1);
        
        //Get Texture Normal
        texNormal = texture2D(u_normalMap, parallaxCoord*opst+uv1).rgb;
        texNormal = texNormal*2.0-1.0;
    }
    else
    {
        vec3 viewDir = normalize(u_viewPosition - v_pos) * TBN;
        texColor = texture2D(u_texture, v_texcoord + viewDir.xy*0.0001);
        
        texNormal = texture2D(u_normalMap, v_texcoord).rgb;
        texNormal = texNormal*2.0-1.0;
    }
    
    
#else
    vec3 texNormal = texture2D(u_normalMap, v_texcoord).rgb;
    texNormal = texNormal*2.0-1.0;
    
    vec4 texColor = texture2D(u_texture, v_texcoord);
#endif
    lowp vec4 result = texColor * v_color;

    
    
    
    
    
    int DarkArea = 0;
	if (block_texcoord == 180 || block_texcoord == 65 || block_texcoord == 7) result.rgb *= 0.65;
    
    if (block_texcoord == 18 || block_texcoord == 35 || block_texcoord == 176) {
    	result.rgb *= 0.85;
    }

	result.rgb *= vec3(1.08, 1.004, 1.0);

    mediump float LightAmount = max(v_color.x, max(v_color.y, v_color.z));
    lowp float SkyLight = CalculateLightIntensity(u_time);

   lowp vec3 LightColor = vec3(1.0);
   
   
   // Sunset(Dusk) Orange color
   if (IS_DUSK && LightAmount > 0.1) LightColor = DuskColor * 3.8;
        
    // Dawn Orange Color
    if (IS_DAWN && LightAmount > 0.1) LightColor = DawnColor * 3.8;

#ifdef VERTICAL_SHADOW
    vec3 maxnormal = min(normal * 183.0, 1.0);
    
    vec3 Topmost;
    vec2 offset;
    
    Topmost = GetBlock(v_pos.x+normal.x, v_pos.z+normal.z);
    
     lowp float top = Topmost.x;
     lowp int BlockId = int(Topmost.y);
     int LedLights = 0;
    
     lowp vec3 ActualBlock = GetBlock(floor(v_pos.x), floor(v_pos.z));
    
   // if (!(ActualBlock.y == 182.0 && ActualBlock.x == floor(v_pos.y)))
    {
    for (float xad = -1.0;xad <= 1.0;xad++)
    {
        for (float zad = -1.0;zad <= 1.0;zad++)
        {
            lowp vec3 TopmostLed = GetBlock(floor(v_pos.x)+xad, floor(v_pos.z)+zad);
            if (TopmostLed.x > v_pos.y) DarkArea += 1;
            if (TopmostLed.y == 182.0 && TopmostLed.z != 0.0)
            {
                LedLights++;
                
	             lowp vec3 ledcolor = vec3(1,1,1);
                 if (TopmostLed.z == 2.0) ledcolor = vec3(0,1,1);
                 else if (TopmostLed.z == 3.0) ledcolor = vec3(1,0,0);
                 else if (TopmostLed.z == 4.0) ledcolor = vec3(0,0,1);
                 else if (TopmostLed.z == 5.0) ledcolor = vec3(1.0, 0.9, 0.0);
                 else if (TopmostLed.z == 6.0) ledcolor = vec3(0,1,0);
                 else if (TopmostLed.z == 7.0) ledcolor = vec3(1.0, 0.4901, 0.0);
                 else if (TopmostLed.z == 8.0) ledcolor = vec3(1,0,1);
                 ledcolor = mix(ledcolor*10.0, vec3(1.0), max(SkyLight, LightAmount));
                 //ledcolor = max(ledcolor, 0.2);
                 
                 #define LedStrength 1.5
                 //result.rgb *= ledcolor * 10.0;
                 result.rgb *= mix(ledcolor, vec3(1.0), clamp(distance(v_pos-0.5, floor(vec3(v_pos.x+xad, TopmostLed.x, v_pos.z+zad))), 0.0, LedStrength)/LedStrength);
             }
             if (LedLights > 3) break;
        }
        if (LedLights > 3) break;
    }

    if (LightAmount > 0.25 && abs(top - v_pos.y) < 25.0 && top > v_pos.y -1.0 && (BlockId == 18 || BlockId == 229 || BlockId == 233 || BlockId == 226))
    {
           if (u_waterDepth <= 0.0) result = mix(result, vec4(u_fogColor, 1), 0.25);
           //result.rgb += clamp(vec3(1.0) * ((water_level) * 2.0), 0.0, 1.0) * LightAmount ;
           result.rgb /= 2.0;

	      //vec3 worldpos = v_pos - u_viewPosition;
          if (playerDistance < 25.0)
          {
              result.rgb += WH(v_pos.xz) * 17.0 * LightAmount;
          }
          else
          {
              result.rgb += lWH(v_pos.xz) * 17.0 * LightAmount;
             // result.b = 1.0;
          }
	}
    
    if (LedLights == 0 && top > v_pos.y+1.0 && cubeface == CUBE_UP) 
    {
        vec2 shadowTex = GetCoord(5, 9);
        float waveoffset = 0.0;
        bool IsAlphatested = false;
    
        if (BlockId >= 12 && BlockId <= 14 || BlockId == 225 || BlockId == 0 || BlockId == 15 || BlockId == 19)
        {
            if (BlockId == 12  || BlockId == 13) 
                shadowTex = GetCoord(5, 4);
            else if (BlockId == 15)
                shadowTex = EGetCoord(3, 4);
            else if (BlockId == 19)
                shadowTex = EGetCoord(5, 5);
    
            if (BlockId == 19) 
                waveoffset = (opst/1.5)*((sin(2.0 * v_pos.x + u_time*650.0 ) * (cos(1.5 * v_pos.z + u_time*650.0) * 0.2)*sin(top+(u_time*650.0))*cos(top*90.0+(u_time*650.0)))*0.5);
    
            vec4 shadowtexcolor = texture2D(u_texture, shadowTex + waveoffset + (fract(v_pos.xz+offset)*opst));
            if (shadowtexcolor.a < 0.5) 
                IsAlphatested = true;
        }
    
        if (!IsAlphatested) 
            result.rgb *= mix(0.65, 1.0, clamp(top-v_pos.y, 0.0, 15.0) / 15.0);
    }
 }
#endif

    bool Torch = LightAmount > SkyLight && LightAmount - SkyLight > 0.235;
#ifdef LIGHT_DETECT
    if (Torch)
    {
      if (!(u_fogYMultiplier == 1.0) && !(IS_DAWN)) {
         result.rgb *= 1.8;
      }
      
      // Check if is not lava
      if (!((block_texcoord >= 124 && block_texcoord <= 126) || (block_texcoord >= 140 && block_texcoord <= 142) || (block_texcoord >= 156 && block_texcoord <= 158)) ) 
      { 
          result.rgb *= mix(TorchColor, vec3(1.0), SkyLight);
      } 
      else 
      {
         result.rgb *= 1.4;
         result.r *= 1.1;
      }

#ifdef ALPHATESTED
      if (result.a < 0.5)
      {
        if (block_texcoord != 67) 
        {
          discard;
        }
        result.rgb = vec3(0.3) * v_color.rgb;
        result.a = 8.0 / 255.0;
      }
#endif

    }
    else
    {
#ifdef ALPHATESTED
      if (result.a < 0.5) {
        discard;
      }
#endif
      if (u_fogYMultiplier > 0.5)
      {  
        /*vec3 OldPixelColor = texture2D(u_screen, AdjustReflectionCoord(SCREEN_UV, textureColor.rb+textureColor.g, cubeface, mix(13.45, 71.27, float(block_texcoord-180)/2.0))).rgb;
	    if (OldPixelColor != vec3(0.0) && cubeface == CUBE_UP)
        {
        result.rgb = mix(result.rgb, OldPixelColor, mix(0.0, 0.58, u_fogYMultiplier));
	    
	    }*/
        result = mix(result, mix(result, vec4(u_fogColor, 1), 0.15), u_fogYMultiplier);

      }
    }
#endif
	
   if (LightAmount < 0.5 && SkyLight > 0.5) {
   	result.rgb *= 0.729;
   }
   else
   {
  	if (LightAmount < 0.75 && SkyLight > 0.75 && block_texcoord != 0 && cubeface == CUBE_UP) {
   	result.rgb *= 0.729;
      }
   }
	if (!Torch) {
      // Diffuse
       result.rgb *= 0.7 + clamp(dot(LightPos, normal), 0.0, 0.3) * LightColor;
    }

   if (u_time < 0.8 && u_time > 0.25)
   {
      result *= 1.575337;
    }

	if (block_texcoord == 40) result.rgb *= 0.735;
    // Fog
	result = mix(result, vec4(u_fogColor, 1), v_fog);

    if (block_texcoord == 180 || block_texcoord == 182)
    {
        float specularStrength = 0.25;
    
        vec3 viewDir = v_pos - u_viewPosition;
        viewDir.xz += sin((texColor.rg+texColor.b/1.5)*mix(13.45, 71.27, float(block_texcoord - 180) / 2.0))*0.2;
        viewDir = normalize(viewDir);
        
        vec3 reflectDir = reflect(RealLightPos, normal);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
        result.rgb += max(0.0, specularStrength * spec) * LightColor;
    }

   result.rgb = result.rgb * 1.0 + (u_lightningStrikeBrightness*0.2);
   
   result.a = 127.0/255.0;
   if (cubeface == CUBE_UP) {
       result.a = float(block_texcoord) / 255.0;
   }
   
   gl_FragColor = result;
}

// <Sampler Name='u_samplerState' Texture='u_texture' />
// <Sampler Name='u_depthMapState' Texture='u_depthMap' />
// <Sampler Name='u_normalMapState' Texture='u_normalMap' />
// <Sampler Name='u_worldTopSampler' Texture='u_worldTopMap' />